version: 25
imports:
- projectPath: Templates
  revision: 0.0.4
jobs:
- name: Maven CI
  steps:
  - !UseTemplateStep
    name: maven build & deploy
    templateName: Tigase Server - Maven build & deploy
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !SetBuildVersionStep
    name: Set build version (for publication)
    buildVersion: '@file:buildVersion@-@file:target/build-version@'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Publish to S3
    runInContainer: true
    image: tigase/devops-1dev-builder-image:latest
    interpreter: !DefaultInterpreter
      commands:
      - '#set -x'
      - export AWS_ACCESS_KEY_ID=@secret:tigase.aws.access-key-id@
      - export AWS_SECRET_ACCESS_KEY=@secret:tigase.aws.secret-access-key@
      - export AWS_DEFAULT_REGION=@secret:tigase.aws.default-region@
      - ''
      - ''
      - export DIST_URL_ROOT=s3://build.tigase.net-new
      - export DIST_DIR=${DIST_URL_ROOT}/nightlies/dists
      - ''
      - SOURCE_DIR=target/_dist
      - COMPONENT=tigase-server
      - ''
      - export DATE=$(date +%Y-%m-%d)
      - VERSION=@file:buildVersion@
      - ''
      - ls -lah
      - ls -lah target
      - ''
      - BUILD_VERSION=@file:target/build-version@
      - ''
      - '# Restored original naming convention'
      - aws s3 cp ${SOURCE_DIR}/ ${DIST_DIR}/${DATE}/ --recursive --exclude="*" --include="${COMPONENT}-*"
      - '#aws s3 cp ${SOURCE_DIR}/ ${DIST_DIR}/${DATE}-${VERSION}-${BUILD_VERSION}/ --recursive --exclude="*" --include="${COMPONENT}-*"'
      - ''
      - '#git remote update'
      - '#git fetch'
      - ''
      - '#GIT_HEAD="$(git rev-parse ''HEAD'')"'
      - '#GIT_ORIGIN_MASTER="$(git rev-parse ''origin/master'')"'
      - '#'
      - '#echo "GIT_HEAD: ${GIT_HEAD}"'
      - '#echo "GIT_ORIGIN_MASTER: ${GIT_ORIGIN_MASTER}"'
      - '#'
      - ''
      - '# Let''s assume this job will be run only on master branch'
      - '#if [ "${GIT_HEAD}" = "${GIT_ORIGIN_MASTER}" ] ; then'
      - "\techo \"master build, setting up 'latest' links for nightlies\""
      - "\tfor file in ${SOURCE_DIR}/${COMPONENT}-*;"
      - "\t\tdo aws s3 cp $file ${DIST_DIR}/latest/$(echo \"$file\" | sed \"s/^.*\\/$COMPONENT-.*b[[:digit:]]*/$COMPONENT/\");"
      - "\tdone"
      - '#fi'
      - ''
      - '#set +x'
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !PublishArtifactStep
    name: Publish artifacts
    sourcePath: target/_dist/
    artifacts: '*'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: Build container images
    runInContainer: true
    image: tigase/tigase-maven-docker:3-temurin-17
    interpreter: !DefaultInterpreter
      commands:
      - mvn jib:build -Pbuild-container-image-free -Djib.to.auth.username=@secret:tigase.docker.hub.username@ -Djib.to.auth.password=@secret:tigase.docker.hub.password@ -f pom.xml
      - mvn jib:build -Pbuild-container-image-enterprise  -Djib.to.auth.username=@secret:tigase.docker.hub.username@ -Djib.to.auth.password=@secret:tigase.docker.hub.password@ -f pom.xml
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !ScheduleTrigger
    cronExpression: 0 0 1 * * ?
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 3600
- name: Push to GitHub
  steps:
  - !PushRepository
    name: Push to GitHub
    remoteUrl: https://github.com/tigase/tigase-server-distribution.git
    passwordSecret: access-token
    force: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 3600
- name: GA-Release
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: false
    withSubmodules: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: detect build version
    runInContainer: true
    image: maven:3-eclipse-temurin-17
    interpreter: !DefaultInterpreter
      commands:
      - echo "Detecting project version (may require some time while downloading maven dependencies)..."
      - echo $(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout) > buildVersion
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !SetBuildVersionStep
    name: set build version
    buildVersion: '@file:buildVersion@-@file:target/build-version@'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !PublishArtifactStep
    name: Publish artifacts
    artifacts: '*'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  triggers:
  - !TagCreateTrigger
    tags: tigase-server*
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  timeout: 3600
- name: nightly (old - do not use)
  steps:
  - !CheckoutStep
    name: checkout
    cloneCredential: !DefaultCredential {}
    withLfs: false
    withSubmodules: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: detect build version
    runInContainer: true
    image: maven:3-eclipse-temurin-17
    interpreter: !DefaultInterpreter
      commands:
      - echo "Detecting project version (may require some time while downloading maven dependencies)..."
      - echo $(mvn org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -DforceStdout) > buildVersion
      - echo $(date +%Y-%m-%d) > todaysDate
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: maven build & deploy
    runInContainer: true
    image: tigase/tigase-maven-docker:3-temurin-17
    interpreter: !DefaultInterpreter
      commands:
      - mvn -version
      - mvn -Pdist -Dtigase.internalrepo.username=@secret:maven-deploy-username@ -Dtigase.internalrepo.password=@secret:maven-deploy-password@ clean test deploy
      - ''
      - ''
      - ls -lah
      - ls -lah target
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !SetBuildVersionStep
    name: set build version
    buildVersion: '@file:buildVersion@-@file:target/build-version@'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !CommandStep
    name: publish to s3
    runInContainer: true
    image: tigase/devops-1dev-builder-image:latest
    interpreter: !DefaultInterpreter
      commands:
      - '#set -x'
      - export AWS_ACCESS_KEY_ID=@secret:aws-access-key-id@
      - export AWS_SECRET_ACCESS_KEY=@secret:aws-secret-access-key@
      - export AWS_DEFAULT_REGION=@secret:aws-default-region@
      - ''
      - ''
      - export DIST_URL_ROOT=s3://build.tigase.net-new
      - export DIST_DIR=${DIST_URL_ROOT}/nightlies/dists-1dev
      - ''
      - SOURCE_DIR=target/_dist
      - COMPONENT=tigase-server
      - ''
      - export DATE=$(date +%Y-%m-%d)
      - VERSION=@file:buildVersion@
      - ''
      - ls -lah
      - ls -lah target
      - ''
      - BUILD_VERSION=@file:target/build-version@
      - ''
      - aws s3 cp ${SOURCE_DIR}/ ${DIST_DIR}/${DATE}-${VERSION}-${BUILD_VERSION}/ --recursive --exclude="*" --include="${COMPONENT}-*"
      - ''
      - git remote update
      - git fetch
      - ''
      - GIT_HEAD="$(git rev-parse 'HEAD')"
      - GIT_ORIGIN_MASTER="$(git rev-parse 'origin/master')"
      - ''
      - 'echo "GIT_HEAD: ${GIT_HEAD}"'
      - 'echo "GIT_ORIGIN_MASTER: ${GIT_ORIGIN_MASTER}"'
      - ''
      - ''
      - if [ "${GIT_HEAD}" = "${GIT_ORIGIN_MASTER}" ] ; then
      - "\techo \"master build, setting up 'latest' links for nightlies\""
      - "\tfor file in ${SOURCE_DIR}/${COMPONENT}-*;"
      - "\t\tdo aws s3 cp $file ${DIST_DIR}/latest/$(echo \"$file\" | sed \"s/^.*\\/$COMPONENT-.*b[[:digit:]]*/$COMPONENT/\");"
      - "\tdone"
      - fi
      - ''
      - '#set +x'
    useTTY: false
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  - !PublishArtifactStep
    name: Publish artifacts
    sourcePath: target/_dist/
    artifacts: '*'
    condition: ALL_PREVIOUS_STEPS_WERE_SUCCESSFUL
  retryCondition: never
  maxRetries: 3
  retryDelay: 30
  caches:
  - key: maven-cache
    path: /root/.m2/repository
  timeout: 3600
